.card.some{:style=>"padding:1%"}
  %h2
    Edit Members of #{@system_name}
  %table.table{:style=>"border-color:white;font-size:110%"}
    %tr
      %td{:style=>"width:35%"}
        %label
          Present Members
      %td
        %label
          Status
      %td{:style=>"width:60%"}
    -@system_members.each do |x|
      %tr
        %td
          #{User.find(x.user_id)}
        %td
          -if SystemTicketsUser.where(user_id:x.user_id,system_ticket_id:@system_id)[0].status=="active"
            .badge.bg-success
              #{SystemTicketsUser.where(user_id:x.user_id,system_ticket_id:@system_id)[0].status}
          -if SystemTicketsUser.where(user_id:x.user_id,system_ticket_id:@system_id)[0].status=="inactive"
            .badge.bg-danger
              #{SystemTicketsUser.where(user_id:x.user_id,system_ticket_id:@system_id)[0].status}
          -if SystemTicketsUser.where(user_id:x.user_id,system_ticket_id:@system_id)[0].status=="pending"
            .badge.bg-warning
              #{SystemTicketsUser.where(user_id:x.user_id,system_ticket_id:@system_id)[0].status}
          -if SystemTicketsUser.where(user_id:x.user_id,system_ticket_id:@system_id)[0].status=="admin"
            .badge.bg-primary
              #{SystemTicketsUser.where(user_id:x.user_id,system_ticket_id:@system_id)[0].status}
        %td
          =form_tag "/system_tickets/edit_member_status", multipart: true, method: 'POST' do
            .form-group
              =text_field_tag :id,params[:id]=x.id,class:'form-control',style:'display:none'
            .form-group
              =text_field_tag :status,params[:status]=x.status,class:'form-control',style:'display:none'
            .form-group
              = button_tag type: 'submit',class:'btt-linkto' do
                %p
                  -if SystemTicketsUser.where(user_id:x.user_id,system_ticket_id:@system_id)[0].status=="active"
                    Deactivate
                  -if SystemTicketsUser.where(user_id:x.user_id,system_ticket_id:@system_id)[0].status=="inactive"
                    Activate
                  -if SystemTicketsUser.where(user_id:x.user_id,system_ticket_id:@system_id)[0].status=="pending"
                    Approve
                  
  =form_tag "/system_tickets/add_member_st", multipart: true, method: 'POST' do
    .form-group
      =text_field_tag :id,params[:id]=@system_id,class:'form-control',style:'display:none'
    %table.table{:style=>"border-color:white;font-size:110%"} 
      %tr
        %td
          %label
            Select New Members
          %div{:style=>"display:flex"}
            %select{:class => "form-control",:style=>"width:50%",:id=>"member-sel"}
              -@non_system_members.each do |x|
                %option{:value => x,:id=>"selected#{x}"}
                  #{User.find(x).last_name}, #{User.find(x).first_name}
            %div
              &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp
            %button{:class=> "btn btn-info btn-block", :onclick => "{addMember()}", :type=>"button"}
              Add
            %div{:id=>"dup",:style=>"display:none;color:red;margin-bottom:-20px;padding-top:10px"}
              %p
                &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp*Duplicate member
            %div{:id=>"empty",:style=>"display:none;color:red;margin-bottom:-20px;padding-top:10px"}
              %p
                &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp*Members cannot be empty
      %tr
        %td
          %label
            Members
          .card{:style=>"min-height:100px;padding:1%"}
            .form-group
              %table.table{:style=>"border-color:white;font-size:110%",:id=>"mem-container"}
      %tr
        %td
          .form-group
            %div{id:"sel-mem"}
          .form-group
            =button_tag type: 'button', class: 'btn btn-primary',onclick:"submitArray()",id:"sub-btn" do
              Save

:css
    .btt-linkto{background:none!important;border:none;padding:0!important;color:#0D6EFD;text-decoration:underline;cursor:pointer;}
    .btt-linkto:hover{color:#0A58CA;}
    form {display: inline;}
    .form-group {display: inline;}

:javascript
  var arr=[]
  
  function addMember() {
    var x=document.getElementById("member-sel").value
    var y=document.getElementById("selected"+x).label
    var w=0
    for(i=0;i<arr.length;i++)
    {
      if(arr[i][0]==x)
      {
        w+=1;
      }
    }
    if(w==0)
    {
      document.getElementById("empty").style.display="none";
      document.getElementById("sub-btn").type="submit"
      arr.push([x,y])
      document.getElementById("dup").style.display="none"
    }
    else
    {
      document.getElementById("dup").style.display="block"
      document.getElementById("empty").style.display="none";
    }

    displayMembers()
  }

  function displayMembers() {
    document.getElementById("mem-container").innerHTML=""
    document.getElementById("sel-mem").innerHTML=""

    var slct=document.createElement('select');
        slct.id="in-sel-mem"
        slct.multiple="multiple"
        slct.style.display="none"
        slct.name="members[]"

    console.log(slct.value+" val")

    document.getElementById("sel-mem").append(slct)

    if(arr.length==0) document.getElementById("sub-btn").type="button";

    for(x=0;x<arr.length;x++)
    {
      var btt = document.createElement('button');
          btt.className = "btn btn-sm btn-danger";
          btt.type = "button";
          btt.innerText= "Remove";
      var temprow=document.getElementById("mem-container").insertRow(x)
      var cell1=temprow.insertCell(0)
          cell1.style="width:50%"
          cell1.innerHTML=arr[x][1]
      var cell2=temprow.insertCell(1)
          cell2.id="btt"+arr[x][0]
          btt.id="btt"+arr[x][0]
          btt.addEventListener("click", removeMember, false);
      document.getElementById(cell2.id).appendChild(btt)

      var option=document.createElement('option')
          option.text=arr[x][0]
          option.value=arr[x][0]
          option.setAttribute('selected', 'selected')

      slct.add(option)
    }
    slct.options.selected=true
  }

  function removeMember() {
    console.log(this.id.substring(3))
    for(x=0;x<arr.length;x++)
    {
      if(this.id.substring(3)==arr[x][0])
        arr.splice(x,1)
    }

    displayMembers()
  }

  function submitArray()
  {
    if(arr.length==0)
    {
      document.getElementById("empty").style.display="block";
      document.getElementById("dup").style.display="none"
    }
    else
    {
      console.log("not empty")
      console.log(arr)
      document.getElementById("empty").style.display="none";
      return arr;
    }
  }