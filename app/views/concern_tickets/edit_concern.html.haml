.card.some{ style: "padding:1%" }
  %h2 Edit Concern Ticket
  = form_for @concern_ticket, url: concern_ticket_path(@concern_ticket), method: :patch do |f|
    .row
      .col-md-4.col-12
        .form-group
          %label Name
          = text_field_tag :name, @concern_ticket.name, id: "input-name", class: "form-control", required: true, placeholder: "Enter Name"
      .col-md-4.col-12
        .form-group
          %label Ticket Name
          = text_field_tag :ticket_name, @concern_ticket.ticket_name, id: "input-ticket-name", class: "form-control", required: true, placeholder: "ex.:ABC", size: 6, maxlength: 6
      .col-md-4.col-12
        .form-group
          %label Computer System
          = select_tag :computer_system_id, 
            options_from_collection_for_select(@computer_systems&.sort_by(&:name) || [], :id, :name, @concern_ticket.computer_system_id),
            class: "form-control bg-secondary-subtle text-dark border-0 shadow-sm", 
            required: true, 
            prompt: "-- SELECT --"

    &nbsp;
    .row
      .col-md-6.col-12
        .form-group
          %label Concern For
          .input-group
            = text_field_tag :concern_for, "", id: "concern-for-input", class: "form-control", placeholder: "Enter Concern For"
            = button_tag "Add", type: "button", class: "btn btn-outline-primary", id: "add-concern-for"

      .col-md-6.col-12
        .form-group
          %label Concern Type
          .input-group
            = text_field_tag :concern, "", id: "concern-type-input", class: "form-control", placeholder: "Enter Concern Type"
            = button_tag "Add", type: "button", class: "btn btn-outline-primary", id: "add-concern-type"

      .row
        .col-md-6.col-12
          .form-group
            %label Concern For Records:
            %ul#concern-records-list.list-group.mt-2.w-100.p-0
        = hidden_field_tag :selected_concern_fors, "", id: "selected-concern-fors" 

        .col-md-6.col-12
          .form-group
            %label Concern Type Records:
            %ul#concern-type-records-list.list-group.mt-2.w-100.p-0
        = hidden_field_tag :selected_concern_types, "", id: "selected-concern-types"        

    &nbsp;      
    .row
      .col-12.text-end
        = f.submit "Save Changes", class: "btn btn-success"
        &nbsp;  
        = link_to 'Cancel', concern_tickets_path, class: 'btn btn-secondary'
  
  = form_tag "/api/v1/tickets/concern_tickets/add_member_concern_ticket", method: :post do
    = hidden_field_tag :concern_ticket_id, @concern_ticket.id
    .row
      .col-md-6.col-12
        .form-group.mt-5
          %label Add Team Members:
          .d-flex
            = select_tag :ct_user_id, 
              options_from_collection_for_select(@ct_users, :id, ->(u) { "#{u.last_name.titleize}, #{u.first_name.titleize}" }),
              class: "form-control form-select-sm bg-secondary-subtle text-dark border-0 shadow-sm flex-grow-1", 
              required: true, 
              prompt: "-- SELECT --"
            = button_tag "Add", type: "submit", class: "btn btn-sm btn-primary ms-2"

  .row  
    .col-md-12
      .form-group    
        %label Members:
        %table.table.table-bordered.mt-2
          %thead
            %tr
              %th.text-center Member Name
              %th.text Roles
              %th.text Status
              %th.text-center Action
          %tbody
            - @concern_ticket.concern_ticket_users.sort_by { |ct_user| ct_user.status.downcase }.each do |ct_user|
              %tr
                %td.text-center= "#{ct_user.user.last_name.titleize}, #{ct_user.user.first_name.titleize}"
                %td.text-center
                  = select_tag "roles_#{ct_user.id}", 
                    options_for_select(["Developer", "Requester", "Unassigned"], ct_user.task || "Unassigned"), 
                    class: "form-control form-select-sm", 
                    data: { id: ct_user.id, field: "roles" }
                %td.text-center
                  = select_tag "status_#{ct_user.id}", 
                    options_for_select(["Active", "Inactive", "Pending"], ct_user.status.titleize || "Pending"), 
                    class: "form-control form-select-sm", 
                    data: { id: ct_user.id, field: "status" }
                %td.text-center
                  = button_tag "Save", 
                    class: "btn btn-sm btn-success save-member-btn", 
                    data: { id: ct_user.id }
:javascript
  document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".save-member-btn").forEach(function (button) {
      button.addEventListener("click", function () {
        const memberId = button.dataset.id;
        console.log(`Saving member with ID: ${memberId}`);
        const rolesField = document.querySelector(`select[data-id="${memberId}"][data-field="roles"]`);
        const statusField = document.querySelector(`select[data-id="${memberId}"][data-field="status"]`);

        const updatedData = {
          roles: rolesField.value,
          status: statusField.value,
        };
        fetch(`/api/v1/tickets/concern_ticket_users/${memberId}/update_status`, {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").content,
          },
          body: JSON.stringify(updatedData),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              alert("Member updated successfully!");
              location.reload();
            } else {
              alert("Failed to update member: " + data.error);
            }
          })
          .catch((error) => console.error("Error updating member:", error));
      });
    });

    //para makapag add sa Concern For and Concern Type
    function addToList(name, status, listId, hiddenFieldId) {
      const list = document.getElementById(listId);
      const hiddenField = document.getElementById(hiddenFieldId);

      if (!list || !hiddenField) {
        console.error("Missing elements:", { list, hiddenField });
        return;
      }

      if (name !== "") {
        const li = document.createElement("li");
        li.className = "list-group-item d-flex justify-content-between align-items-center";

        const textSpan = document.createElement("span");
        textSpan.textContent = name;

        const statusBadge = document.createElement("span");
        statusBadge.className = "badge ms-2";
        statusBadge.textContent = status;

        if (status.toLowerCase() === "active") {
          statusBadge.classList.add("bg-success");
        } else if (status.toLowerCase() === "inactive") {
          statusBadge.classList.add("bg-danger");
        } else {
          statusBadge.classList.add("bg-secondary");
        }

        const deleteBtn = document.createElement("button");
        deleteBtn.className = "btn btn-sm btn-danger ms-2";
        deleteBtn.textContent = "Ã—";
        deleteBtn.onclick = function () {
          li.remove();
          updateHiddenField(hiddenField, list);
        };

        li.appendChild(textSpan);
        li.appendChild(statusBadge);
        li.appendChild(deleteBtn);
        list.appendChild(li);

        updateHiddenField(hiddenField, list);
      } else {
        console.warn("Input field is empty");
      }
    }

    //update ng values
    function updateHiddenField(hiddenField, list) {
      const items = [...list.children].map((li) => li.firstChild.textContent.trim());
      hiddenField.value = items.join(",");
    }

    //pag load
    function loadExistingRecords() {
      const concernForList = document.getElementById("concern-records-list");
      const concernTypeList = document.getElementById("concern-type-records-list");
      const concernForHidden = document.getElementById("selected-concern-fors");
      const concernTypeHidden = document.getElementById("selected-concern-types");

      if (!concernForList || !concernTypeList || !concernForHidden || !concernTypeHidden) {
        console.error("Missing elements for loading existing records");
        return;
      }

      //pag fetch
      const existingConcernFors = #{raw @concern_ticket.concern_fors.map { |cf| { name: cf.name, status: cf.status } }.to_json};
      const existingConcernTypes = #{raw @concern_ticket.concern_types.map { |ct| { name: ct.name, status: ct.status } }.to_json};

      existingConcernFors.forEach((cf) => addToList(cf.name, cf.status, "concern-records-list", "selected-concern-fors"));
      existingConcernTypes.forEach((ct) => addToList(ct.name, ct.status, "concern-type-records-list", "selected-concern-types"));
    }

    // Add Concern For
    document.getElementById("add-concern-for").addEventListener("click", function () {
      const inputField = document.getElementById("concern-for-input");
      addToList(inputField.value.trim(), "Pending", "concern-records-list", "selected-concern-fors");
      inputField.value = "";
    });

    // Add Concern Type
    document.getElementById("add-concern-type").addEventListener("click", function () {
      const inputField = document.getElementById("concern-type-input");
      addToList(inputField.value.trim(), "Pending", "concern-type-records-list", "selected-concern-types");
      inputField.value = "";
    });

    //load ng existing records
    loadExistingRecords();
  });