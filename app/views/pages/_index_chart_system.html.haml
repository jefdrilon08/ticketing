= form_tag "", method: 'GET' do
    %table.table{:style=>"border-color:white;font-size:110%"}
        %tr
            %td{:style=>"width:5%"}
                %label
                    Start Date
                .form-group
                    =text_field_tag :sdate,params[:f_sdate],class:'form-control',type: :date,id:"start-date", onchange:"dateRange()"
            %td{:style=>"width:5%"}
                %label
                    End Date
                .form-group
                    =text_field_tag :edate,params[:f_edate],class:'form-control',type: :date,id:"end-date", onchange:"dateRange()"
                .form-group{:style=>"display:none"}
                    =text_field_tag :cdate,params[:f_cdate],class:'form-control',type: :date,id:"current-date", value:DateTime.current.to_date
            %td{:rowspan=>2}
                %label
                    Legend
                %div{:id=>"legend"}
        %tr
            %td{:colspan=>2} 
                %div{:style=>"display:block", :id=>'default-range'}
                    - first_ticket = SystemTicketDesc.first
                    %h5{:style=>"margin:-25px 0px 35px 10px;font-weight:900"}
                        - if first_ticket.present?
                            #{first_ticket.created_at.to_date} - present
                        - else
                            No tickets yet - present
                %div{:style=>"display:none", :id=>'invalid'}
                    %h5{:style=>"margin:-25px 0px 35px 10px;color:red"}
                        Range invalid.
                %div{:style=>"display:none", :id=>'enter-date'}
                    %h5{:style=>"margin:-25px 0px 35px 10px"}
                        Enter start date and end date.
            %td

%script{:src => "https://cdn.jsdelivr.net/npm/chart.js"}

%canvas#stackedChartID{:style=>"margin-top:-20px"}

:javascript

    var color=["#1CBA88","#19BEB5","#159CC1","#126EC4","#0F3DC7","#0F0CCA","#4009CE","#BB1B90","#BF1865","#C21436",
         "#C51B11","#C84A0E","#CB7C0B","#CFB207","#BC521A","#C07E16","#C3AD13","#ACC610","#7CC90D","#48CD0A"]
    var data1=#{@tix_list}
    var dataLength=data1.length
    var data2=[]
    var labels=#{@labels}
    var dataForAvg=[]

    onload=defaultData(false)
    
    function labelUpdate(tickets)
    {
        labels=#{@labels}
        var avg=0
        var arr=new Array(labels.length)

        arr=avgCompute(dataForAvg)

        console.log(arr)

        for(x=0;x<labels.length;x++)
        {
            var totalClosed=0
            var totalOpen=0
            for(y=0;y<dataLength;y++)
            {
                if(y==0) temp=0
                else temp=y*2
                totalOpen+=tickets[temp].data[x]
                totalClosed+=tickets[temp+1].data[x]
            }
            labels[x].push(" "+totalClosed+" of "+(totalClosed+totalOpen)+" tickets closed")
            if(arr[x]!="NaN")
                labels[x].push(" Days per ticket: "+arr[x])
        }
    }

    function defaultData(a)
    {
        dataForAvg=[]
        data2=[]
        labels=#{@labels}
        var arr=[]
        for(x=0;x<dataLength;x++)
        {
            open_=[]
            closed_=[]
            opId=[]
            cloId=[]

            for(y=0;y<data1[x][1].length;y++)
            {
                temp1=0
                temp2=0
                if(data1[x][1][y].length>0)
                {
                    for(z=0;z<data1[x][1][y].length;z++)
                    {
                        if(data1[x][1][y][z][1]==='open')
                        {
                            opId.push(data1[x][1][y][z][2])
                            temp1+=1
                        }
                        else
                        {
                            dataForAvg.push([y,ticketDuration(data1[x][1][y][z][0],data1[x][1][y][z][1])])
                            cloId.push(data1[x][1][y][z][2])
                            temp2+=1
                        }
                    }
                }
                open_.push(temp1)
                closed_.push(temp2)
            }

            data2.push({
                label:data1[x][0]+' (open tickets)',
                data:open_,
                backgroundColor:color[x],
                stack:"Stack 0"
            })
            data2.push({
                label:data1[x][0]+' (closed tickets)',
                data:closed_,
                backgroundColor:color[x],
                stack:"Stack 1"
            })

            opId=new Set(opId)
            opId=[...opId]

            cloId=new Set(cloId)
            cloId=[...cloId]

            arr.push([opId.length,cloId.length])
        }

        labelUpdate(data2)

        showLegend(arr)

        if(a)
        {
            myChart.data = {
                labels: labels,
                datasets: data2
            };
            myChart.update();
        }
    }

    var myContext = document.getElementById(
            "stackedChartID").getContext('2d');
    var myChart = new Chart(myContext, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: data2
        },
        options: {
            plugins: {
                legend: {
                    display:false,
                    font:{
                    }
                },
                title: {
                    display:false,
                    text: 'Tickets Received'
                },
            },
            scales: {
                x: {
                    stacked: true,
                    ticks: {
                        color: 'black',
                        font: {
                            size: 16 }
                            }
                },
                y: {
                    stacked: true,
                    ticks:
                    {
                        color: 'black',
                        stepSize:1,
                        font: {
                            size: 16 }
                    }
                }
            }
        });

    function showLegend(arr)
    {
        var legendContainer = document.getElementById('legend')

        legendContainer.innerHTML=''

        for(x=0,y=0;x<dataLength;x++)
        {
            var legendCol = document.createElement('div')
            var legendCount = document.createElement('div')
            var tixCount = document.createElement('p')
            tixCount.innerHTML="open:\t"+arr[x][0]+", closed:\t"+arr[x][1]
            legendCol.id="col-"+x
            legendCol.classList.add('col')
            var legendColor = document.createElement('span')
            var legendLabel = document.createElement('span')
            legendLabel.style.fontWeight=900
            if(x%4==0||y==0)
            {
                var legendRow = document.createElement('div')
                y++
                legendRow.id="row-"+y
                legendRow.classList.add('row')
                legendContainer.appendChild(legendRow)
            }
            document.getElementById('row-'+y).append(legendCol)

            legendColor.classList.add('bi','bi-square-fill')
            legendColor.setAttribute('style', 'color:'+color[x])
            legendColor.setAttribute('title', data1[x][0])

            legendLabel.innerHTML='&nbsp&nbsp'+data1[x][0]

            document.getElementById('col-'+x).append(legendColor)
            document.getElementById('col-'+x).append(legendLabel)

            legendCount.append(tixCount)

            document.getElementById('col-'+x).append(legendCount)
            
        }

    }

    function updateData(date1,date2)
    {
        dataForAvg=[]
        data2=[]
        var arr=[]

        for(x=0;x<dataLength;x++)
        {
            open_=[]
            closed_=[]
            opId=[]
            cloId=[]

            for(y=0;y<data1[x][1].length;y++)
            {
                temp1=0
                temp2=0
                if(data1[x][1][y].length>0)
                {
                    for(z=0;z<data1[x][1][y].length;z++)
                    {
                        if(data1[x][1][y][z][0]<=date2)
                        {
                            if(data1[x][1][y][z][1]=='open'||data1[x][1][y][z][1]>date2)
                            {
                                opId.push(data1[x][1][y][z][2])
                                temp1+=1
                            }
                            else if(data1[x][1][y][z][1]<=date2)
                            {
                                dataForAvg.push([y,ticketDuration(data1[x][1][y][z][0],data1[x][1][y][z][1])])
                                temp2+=1
                                cloId.push(data1[x][1][y][z][2])
                            }
                        }
                    }
                }
                open_.push(temp1)
                closed_.push(temp2)
            }

            data2.push({
                label:data1[x][0]+' (open tickets)',
                data:open_,
                backgroundColor:color[x],
                stack:"Stack 0"
            })
            data2.push({
                label:data1[x][0]+' (closed tickets)',
                data:closed_,
                backgroundColor:color[x],
                stack:"Stack 1"
            })

            opId=new Set(opId)
            opId=[...opId]

            cloId=new Set(cloId)
            cloId=[...cloId]

            arr.push([opId.length,cloId.length])
        }

        labelUpdate(data2)

        myChart.data = {
                labels: labels,
                datasets: data2
        };

        showLegend(arr)
        myChart.update();
    }

    function dateRange()
    {
        var currentDate=document.getElementById('current-date').value
        var startDate=document.getElementById('start-date').value
        var endDate=document.getElementById('end-date').value

        if(startDate==''||endDate=='')
        {
            if(startDate==''&&endDate=='')
            {
                document.getElementById('enter-date').style.display="none"   
                document.getElementById('default-range').style.display="block"
                defaultData(true)
            }
            else
            {
                document.getElementById('enter-date').style.display="block"  
                document.getElementById('default-range').style.display="none"
            } 
        }
        else if(startDate>endDate||startDate>currentDate||endDate>currentDate)
        {
            document.getElementById('invalid').style.display="block"
            document.getElementById('enter-date').style.display="none"  
        }
        else if(startDate==endDate||startDate<endDate)
        {
            document.getElementById('invalid').style.display="none"
            document.getElementById('enter-date').style.display="none"  

            updateData(startDate,endDate)
        }           
    }

    function ticketDuration(first,last)
    {
        first= new Date (first)
        last= new Date (last)
        
        let date1 = Date.UTC(first.getFullYear(), first.getMonth(), first.getDate())
        let date2 = Date.UTC(last.getFullYear(), last.getMonth(), last.getDate())

        let timeDiff = Math.abs(date2 - date1);

        let daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));

        return daysDiff

    }

    function avgCompute(data)
    {
        console.log(data)
        var arr=new Array(labels.length)
        for(x=0;x<data.length;x++)
        {
            if(arr[data[x][0]]==null)
                arr[data[x][0]]=[0,0]
            arr[data[x][0]][0]+=data[x][1]
            arr[data[x][0]][1]+=1
        }

        for(x=0;x<arr.length;x++)
        {
            if(arr[x]!=null)
                arr[x]=arr[x][0]/arr[x][1]
            if(!Number.isInteger(arr[x]))
                arr[x]=(Math.round(arr[x] * 100) / 100).toFixed(2)
        }

        return arr
    }


