:css
  @import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css")

- inventory_data = @inventory.data["inventory_data"].is_a?(Array) ? @inventory.data["inventory_data"].first || {} : {}

%div.card
  %div.card-header
    %h4= @inventory.new_record? ? "New Item - Stock" : "Update Item - Stock"

  %div.card-body
    %form{ action: @inventory.new_record? ? stocks_path : update_inventory_path(@inventory), method: "post", id: "inventoryForm" }
      = hidden_field_tag :authenticity_token, form_authenticity_token
      - unless @inventory.new_record?
        = hidden_field_tag :_method, "patch"

      .row

        .col-md-4
          .form-group
            %label{ for: "title" } Title
            %input.form-control{ type: "text", id: "title", name: "inventory[title]", required: true, value: inventory_data["title"].to_s }

          .form-group
            %label{ for: "item_category" } Item Category
            - if @item_categories.present?
              %select.form-control{ id: "item_category", name: "inventory[item_category_id]", required: true }
                %option{ value: "" } -- SELECT --
                - @item_categories.each do |cat|
                  %option{ value: cat.id, selected: (inventory_data["item_category_id"].to_s == cat.id.to_s), "data-subcategories": @sub_categories.select { |s| s.category_id == cat.id }.to_json }= cat.name
            - else
              %p.text-muted No item categories available.

          .form-group
            %label{ for: "sub_category" } Sub Category
            %select.form-control{ id: "sub_category", name: "inventory[sub_category_id]", required: true }
              %option{ value: "" } -- SELECT --
              - if inventory_data["item_category_id"].present?
                - @sub_categories.select { |s| s.category_id.to_s == inventory_data["item_category_id"].to_s }.each do |sub|
                  %option{ value: sub.id, selected: (inventory_data["sub_category_id"].to_s == sub.id.to_s) }= sub.name

          .form-group
            %label{ for: "item_name" } Item Name
            - if @items.present?
              %select.form-control{ id: "item_name", name: "inventory[item_id]", required: true }
                %option{ value: "" } -- SELECT --
                - @items.each do |item|
                  %option{ value: item.id, selected: (@inventory.item_id.to_s == item.id.to_s) }= item.name
            - else
              %p.text-muted No items available.

          .form-group
            %label{ for: "serial_number" } Serial Number
            %input.form-control{ type: "text", id: "serial_number", name: "inventory[serial_number]", value: @inventory.serial_number }

        .col-md-4
          .form-group
            %label{ for: "brand_name" } Brand Name
            - if @brands.present?
              %select.form-control{ id: "brand_name", name: "inventory[brand_id]", required: true }
                %option{ value: "" } -- SELECT --
                - @brands.each do |brand|
                  %option{ value: brand.id, selected: (inventory_data["brand_id"].to_s == brand.id.to_s) }= brand.name
            - else
              %p.text-muted No brand available.

          .form-group
            %label{ for: "model" } Model
            %input.form-control{ type: "text", id: "model", name: "inventory[model]", required: true, value: inventory_data["model"].to_s }

          .form-group
            %label{ for: "quantity" } Quantity
            %input.form-control{ type: "number", id: "quantity", name: "inventory[quantity]", min: 0, required: true, value: (@inventory.new_record? ? 0 : @inventory.quantity) }

          .form-group
            %label{ for: "threshhold_alerts" } Threshold Alerts
            %input.form-control{ type: "text", id: "threshhold_alerts", name: "inventory[threshhold_alerts]", required: true, value: (inventory_data["threshhold_alerts"].presence || "0.0") }

          .form-group
            %label{ for: "reorder_points" } Re-order Points
            %input.form-control{ type: "text", id: "reorder_points", name: "inventory[reorder_points]", required: true, value: (inventory_data["reorder_points"].presence || "0.0") }

        .col-md-4
          .form-group
            %label{ for: "unit" } Unit
            %input.form-control{ type: "text", id: "unit_input", name: "inventory[unit]", value: @inventory.unit }
            = hidden_field_tag "inventory[unit]", "", id: "unit_hidden", disabled: true
            %div#unit_display.card.form-control{ style: "display: none; margin-top: 5px;" }
              = @inventory.unit

          .form-group
            %label{ for: "supplier_name" } Supplier Name
            %select.form-control{ id: "supplier_name", name: "inventory[supplier_id]", required: true }
              %option{ value: "" } -- SELECT --

          .form-group
            %label{ for: "purchase_date" } Purchase Date
            %input.form-control{ type: "date", id: "purchase_date", name: "inventory[purchase_date]", required: true, value: @inventory.purchase_date }

          .form-group
            %label{ for: "inventory_type" } Type
            %select.form-control{ id: "inventory_type", name: "inventory[type]", required: true }
              %option{ value: "" } -- SELECT --
              %option{ value: "regular", selected: (@inventory.type == 'regular') } Regular
              %option{ value: "service", selected: (@inventory.type == 'service') } Service
              %option{ value: "distribute", selected: (@inventory.type.blank? || @inventory.type == 'distribute') } Distribute

          .form-group
            %label{ for: "status" } Status
            %select.form-control{ id: "status", name: "inventory[status]", required: true }
              %option{ value: "" } -- SELECT --
              %option{ value: "Active", selected: (@inventory.status == 'Active') } Active
              %option{ value: "Dispose", selected: (@inventory.status == 'Dispose') } Dispose

      .mt-4
      %div.card
        %div.card-header
          %h5.card-title
            Child Item Details
            %button.btn.btn-sm.btn-primary{ type: "button", id: "add-child-button", disabled: true, style: "float: right;" }
              + Add Child
        %div.card-body

          .row
            .col-md-6.form-group
              %label{ for: "child_name" } Item Name
              %select.form-control{ id: "child_name" }
                %option{ value: "" } -- SELECT --
                - @items.reject(&:is_parent).each do |itm|
                  %option{ value: itm.id }= itm.name
            .col-md-6.form-group
              %label{ for: "child_item_category" } Item Category
              %select.form-control{ id: "child_item_category" }
                %option{ value: "" } -- SELECT --
                - @item_categories.each do |cat|
                  %option{ value: cat.id, "data-subcategories": @sub_categories.select { |s| s.category_id == cat.id }.to_json }= cat.name
          .row        
            .col-md-6.form-group
              %label{ for: "child_sub_category" } Sub Category
              %select.form-control{ id: "child_sub_category" }
                %option{ value: "" } -- SELECT --
                - @sub_categories.each do |sub|
                  %option{ value: sub.id, "data-category-id": sub.category_id, style: "display: none;" }= sub.name    

            .col-md-6.form-group
              %label{ for: "child_brand" } Brand
              %select.form-control{ id: "child_brand" }
                %option{ value: "" } -- SELECT --
                - @brands.each do |br|
                  %option{ value: br.id }= br.name
         
          .row
            .col-md-6.form-group
              %label{ for: "child_serial_number" } Serial Number
              %input.form-control{ type: "text", id: "child_serial_number", placeholder: "Serial number" }
            .col-md-6.form-group
              %label{ for: "child_quantity" } Quantity
              %input.form-control{ type: "number", id: "child_quantity", placeholder: "Quantity" }

          %table.table.table-bordered#child-items-table
            %thead
              %tr
                %th Name
                %th Brand
                %th.text-center Serial Number
                %th.text-center Quantity
                %th.text-center Item Category
                %th.text-center Sub Category
                %th.text-center Action
            %tbody

      #child-items-hidden

      .mt-4
      .form-group.text-end
        %button.btn.btn-primary{ type: "submit" }
          = @inventory.new_record? ? "Add Stock" : "Update Stock"

:javascript
  document.addEventListener("DOMContentLoaded", () => {
    const items           = #{raw @items.to_json.html_safe};
    const mainItemSelect  = document.getElementById("item_name");
    const supplierSelect  = document.getElementById("supplier_name");
    const addChildBtn     = document.getElementById("add-child-button");
    const serialInput     = document.getElementById("serial_number");
    const unitInput       = document.getElementById("unit_input");
    const unitDisplay     = document.getElementById("unit_display");
    const unitHidden      = document.getElementById("unit_hidden");
    const childName       = document.getElementById("child_name");
    const childBrand      = document.getElementById("child_brand");
    const childSerial     = document.getElementById("child_serial_number");
    const childQuantity   = document.getElementById("child_quantity");
    const childCategory   = document.getElementById("child_item_category");
    const childSubCat     = document.getElementById("child_sub_category");
    const childTableBody  = document.querySelector("#child-items-table tbody");
    const hiddenContainer = document.getElementById("child-items-hidden");
    const itemCategory    = document.getElementById("item_category");
    const subCategory     = document.getElementById("sub_category");

    const inventorySupplierId = "#{@inventory.supplier_id}";

    let childItems = #{raw((@inventory.data['child_item'].is_a?(Hash) ? @inventory.data['child_item'].values : (@inventory.data['child_item'] || [])).map { |ci| { child_item_id: ci['child_item_id'], child_name: ci['child_name'], child_brand: ci['child_brand'], child_serial_number: ci['child_serial_number'], child_quantity: ci['child_quantity'], child_item_category_id: ci['child_item_category_id'], child_item_category_name: ci['child_item_category_name'], child_sub_category_id: ci['child_sub_category_id'], child_sub_category_name: ci['child_sub_category_name'] } }.to_json)};

    const fieldKeys = [
      'child_item_id',
      'child_name',
      'child_brand',
      'child_serial_number',
      'child_quantity',
      'child_item_category_id',
      'child_item_category_name',
      'child_sub_category_id',
      'child_sub_category_name'
    ];

    function renderChildItems() {
      childTableBody.innerHTML = '';
      hiddenContainer.innerHTML = '';
      childItems.forEach((ci, idx) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${ci.child_name}</td>
          <td>${ci.child_brand}</td>
          <td class=\"text-end\">${ci.child_serial_number}</td>
          <td class=\"text-end\">${ci.child_quantity}</td>
          <td class=\"text-center\">${ci.child_item_category_name}</td>
          <td class=\"text-center\">${ci.child_sub_category_name}</td>
          <td class=\"text-center\">
            <button type=\"button\" class=\"btn btn-sm btn-danger remove-child\" data-idx=\"${idx}\">Remove</button>
          </td>`;
        childTableBody.appendChild(tr);

        fieldKeys.forEach(key => {
          const input = document.createElement('input');
          input.type = 'hidden';
          input.name = `inventory[data][child_item][${idx}][${key}]`;
          input.value = ci[key] || '';
          hiddenContainer.appendChild(input);
        });
      });

      document.querySelectorAll('.remove-child').forEach(btn => {
        btn.addEventListener('click', e => {
          childItems.splice(+e.currentTarget.dataset.idx, 1);
          renderChildItems();
        });
      });
    }

    function toggleAddChild() {
      const mainItm = items.find(i => i.id === mainItemSelect.value);
      const canAdd  = mainItemSelect.value && mainItm && mainItm.is_parent === true;
      [childName, childBrand, childSerial, childQuantity, childCategory, childSubCat]
        .forEach(el => {
          el.disabled = !canAdd;
          if (!canAdd) el.value = '';
        });
      addChildBtn.disabled = !canAdd;
    }

    function updateSupplierDropdown(itemId) {
      const sel = items.find(i => i.id == itemId);
      supplierSelect.innerHTML = '<option value="">-- SELECT --</option>';
      if (!sel || !sel.data?.supplier_ids) return;
      sel.data.supplier_ids.forEach((id, idx) => {
        const opt = document.createElement("option");
        opt.value = id;
        opt.textContent = sel.data.supplier_names[idx] || "Unknown";
        if (id.toString() === inventorySupplierId) opt.selected = true;
        supplierSelect.appendChild(opt);
      });
    }

    function updateUnitAndSerial(itemId) {
      const sel = items.find(i => i.id == itemId);
      if (!sel) return;
      const isSupply = sel.item_type.toLowerCase() === 'supply';
      serialInput.disabled = isSupply;
      serialInput.required = !isSupply;
      if (isSupply) serialInput.value = '';
      if (isSupply) {
        unitInput.style.display = 'none';
        unitInput.required = false;
        unitInput.disabled = true;
        unitDisplay.textContent = sel.unit;
        unitDisplay.style.display = 'block';
        unitHidden.value = sel.unit;
        unitHidden.disabled = false;
      } else {
        unitInput.style.display = 'block';
        unitInput.required = true;
        unitInput.disabled = false;
        unitDisplay.style.display = 'none';
        unitHidden.value = '';
        unitHidden.disabled = true;
      }
    }

    function updateSubCategories(categoryId, subCategorySelect, selectedSubCategoryId = null) {
      subCategorySelect.innerHTML = '<option value="">-- SELECT --</option>';
      if (!categoryId) return;

      const category = document.querySelector(`#item_category option[value="${categoryId}"]`);
      if (!category) return;

      const subCategories = JSON.parse(category.dataset.subcategories || '[]');
      subCategories.forEach(sub => {
        const option = document.createElement('option');
        option.value = sub.id;
        option.textContent = sub.name;
        if (selectedSubCategoryId && sub.id === selectedSubCategoryId) {
          option.selected = true;
        }
        subCategorySelect.appendChild(option);
      });
    }

    function updateChildSubCategories(categoryId) {
      const options = childSubCat.querySelectorAll('option');
      options.forEach(opt => {
        if (opt.value === "") {
          opt.style.display = 'block';
        } else {
          const show = opt.dataset.categoryId === categoryId;
          opt.style.display = show ? 'block' : 'none';
          if (!show && opt.selected) {
            opt.selected = false;
            childSubCat.querySelector('option[value=""]').selected = true;
          }
        }
      });
    }

    addChildBtn.addEventListener('click', () => {
      if (!childName.value || !childBrand.value || !childSerial.value || !childQuantity.value || !childCategory.value || !childSubCat.value) {
        return alert('Please fill ALL child fields');
      }

      childItems.push({
        child_item_id: childName.value,
        child_name: childName.options[childName.selectedIndex].text,
        child_brand: childBrand.options[childBrand.selectedIndex].text,
        child_serial_number: childSerial.value,
        child_quantity: childQuantity.value,
        child_item_category_id: childCategory.value,
        child_item_category_name: childCategory.options[childCategory.selectedIndex].text,
        child_sub_category_id: childSubCat.value,
        child_sub_category_name: childSubCat.options[childSubCat.selectedIndex].text
      });
      [childName, childBrand, childSerial, childQuantity, childCategory, childSubCat]
        .forEach(el => el.value = '');
      renderChildItems();
    });

    itemCategory.addEventListener('change', () => {
      updateSubCategories(itemCategory.value, subCategory);
    });

    childCategory.addEventListener('change', () => {
      updateChildSubCategories(childCategory.value);
    });

    mainItemSelect.addEventListener('change', () => {
      toggleAddChild();
      updateSupplierDropdown(mainItemSelect.value);
      updateUnitAndSerial(mainItemSelect.value);
    });

    if (itemCategory.value) {
      updateSubCategories(itemCategory.value, subCategory, "#{inventory_data['sub_category_id']}");
    }

    toggleAddChild();
    if (mainItemSelect.value) {
      updateSupplierDropdown(mainItemSelect.value);
      updateUnitAndSerial(mainItemSelect.value);
    }
    renderChildItems();
  });