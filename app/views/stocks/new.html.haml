:css
  @import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css")

- inventory_data = @inventory.data["inventory_data"].is_a?(Array) ? @inventory.data["inventory_data"].first || {} : {}

%div.card
  %div.card-header
    %h4= @inventory.new_record? ? "New Item - Stock" : "Update Item - Stock"

  %div.card-body
    %form{ action: @inventory.new_record? ? stocks_path : update_inventory_path(@inventory), method: "post", id: "inventoryForm" }
      = hidden_field_tag :authenticity_token, form_authenticity_token
      - unless @inventory.new_record?
        = hidden_field_tag :_method, "patch"

      .row
        .col-md-4.form-group
          %label{ for: "title" } Title
          %input.form-control{ type: "text", id: "title", name: "inventory[title]", required: true, value: inventory_data["title"].to_s }
        .col-md-4.form-group
          %label{ for: "brand_name" } Brand Name
          - if @brands.present?
            %select.form-control{ id: "brand_name", name: "inventory[brand_id]", required: true }
              %option{ value: "" } -- SELECT --
              - @brands.each do |brand|
                %option{ value: brand.id, selected: (inventory_data["brand_id"].to_s == brand.id.to_s) }= brand.name
          - else
            %p.text-muted No brand available.
        .col-md-4.form-group
          %label{ for: "model" } Model
          %input.form-control{ type: "text", id: "model", name: "inventory[model]", required: true, value: inventory_data["model"].to_s }

      .row
        .col-md-4.form-group
          %label{ for: "threshhold_alerts" } Threshold Alerts
          %input.form-control{ type: "text", id: "threshhold_alerts", name: "inventory[threshhold_alerts]", required: true, value: (inventory_data["threshhold_alerts"].presence || "0.0") }
        .col-md-4.form-group
          %label{ for: "reorder_points" } Re-order Points
          %input.form-control{ type: "text", id: "reorder_points", name: "inventory[reorder_points]", required: true, value: (inventory_data["reorder_points"].presence || "0.0") }
        .col-md-4.form-group
          %label{ for: "item_name" } Item Name
          - if @items.present?
            %select.form-control{ id: "item_name", name: "inventory[item_id]", required: true }
              %option{ value: "" } -- SELECT --
              - @items.each do |item|
                %option{ value: item.id, selected: (@inventory.item_id == item.id) }= item.name
          - else
            %p.text-muted No items available.

      .row
        .col-md-4.form-group
          %label{ for: "inventory_type" } Type
          %select.form-control{ id: "inventory_type", name: "inventory[type]", required: true }
            %option{ value: "" } -- SELECT --
            %option{ value: "regular", selected: (@inventory.type == 'regular') } Regular
            %option{ value: "service", selected: (@inventory.type == 'service') } Service
            %option{ value: "distribute", selected: (@inventory.type.nil? || @inventory.type == 'distribute') } Distribute
        .col-md-4.form-group
          %label{ for: "serial_number" } Serial Number
          %input.form-control{ type: "text", id: "serial_number", name: "inventory[serial_number]", value: @inventory.serial_number }
        .col-md-4.form-group
          %label{ for: "unit" } Unit
          %input.form-control{ type: "text", id: "unit_input", name: "inventory[unit]", value: @inventory.unit }
          = hidden_field_tag "inventory[unit]", "", id: "unit_hidden", disabled: true
          %div#unit_display.card.form-control{ style: "display: none; margin-top: 5px;" }
            = @inventory.unit

      .row
        .col-md-4.form-group
          %label{ for: "quantity" } Quantity
          %input.form-control{ type: "number", id: "quantity", name: "inventory[quantity]", min: 0, required: true, value: (@inventory.new_record? ? 0 : @inventory.quantity) }
        .col-md-4.form-group
          %label{ for: "purchase_date" } Purchase Date
          %input.form-control{ type: "date", id: "purchase_date", name: "inventory[purchase_date]", required: true, value: @inventory.purchase_date }
        .col-md-4.form-group
          %label{ for: "supplier_name" } Supplier Name
          %select.form-control{ id: "supplier_name", name: "inventory[supplier_id]", required: true }
            %option{ value: "" } -- SELECT --

      .row
        .col-md-4.form-group
          %label{ for: "status" } Status
          %select.form-control{ id: "status", name: "inventory[status]", required: true }
            %option{ value: "" } -- SELECT --
            %option{ value: "Active", selected: (@inventory.status == 'Active') } Active
            %option{ value: "Dispose", selected: (@inventory.status == 'Dispose') } Dispose

      .mt-4
      %div.card
        %div.card-header
          %h5.card-title
            Child Item Details
            %button.btn.btn-sm.btn-primary{ type: "button", id: "add-child-button", disabled: true, style: "float: right;" }
              + Add Child
        %div.card-body
          .row
            .col-md-6.form-group
              %label{ for: "child_name" } Item Name
              %select.form-control{ id: "child_name" }
                %option{ value: "" } -- SELECT --
                - @items.each do |item|
                  - if item.is_parent == false
                    %option{ value: item.name }= item.name
            .col-md-6.form-group
              %label{ for: "child_brand" } Brand
              %select.form-control{ id: "child_brand" }
                %option{ value: "" } -- SELECT --
                - @brands.each do |brand|
                  %option{ value: brand.name }= brand.name

          .row
            .col-md-6.form-group
              %label{ for: "child_serial_number" } Serial Number
              %input.form-control{ type: "text", id: "child_serial_number", placeholder: "Serial number" }
            .col-md-6.form-group
              %label{ for: "child_quantity" } Quantity
              %input.form-control{ type: "number", id: "child_quantity", placeholder: "Quantity" }

          %table.table.table-bordered#child-items-table
            %thead
              %tr
                %th Name
                %th Brand
                %th.text-center Serial Number
                %th.text-center Quantity
                %th.text-center Action
            %tbody

      #child-items-hidden

      .mt-4 
      .form-group.text-end
        %button.btn.btn-primary{ type: "submit" }
          = @inventory.new_record? ? "Add Stock" : "Update Stock"

:javascript
  document.addEventListener("DOMContentLoaded", () => {
    const items           = #{raw @items.to_json.html_safe};
    const itemSelect      = document.getElementById("item_name");
    const supplierSelect  = document.getElementById("supplier_name");
    const addChildBtn     = document.getElementById("add-child-button");
    const serialInput     = document.getElementById("serial_number");
    const unitInput       = document.getElementById("unit_input");
    const unitDisplay     = document.getElementById("unit_display");
    const unitHidden      = document.getElementById("unit_hidden");
    const childTableBody  = document.querySelector("#child-items-table tbody");
    const hiddenContainer = document.getElementById("child-items-hidden");

    const inventorySupplierId = "#{@inventory.supplier_id}";

    let childItems = #{raw((@inventory.data['child_item'].is_a?(Hash) ? @inventory.data['child_item'].values : (@inventory.data['child_item'] || [])).map { |ci| { name: ci['child_name'], brand: ci['child_brand'], serial: ci['child_serial_number'], quantity: ci['child_quantity'] } }.to_json)};

    const childFieldMap = {
      name:     'child_name',
      brand:    'child_brand',
      serial:   'child_serial_number',
      quantity: 'child_quantity'
    };

    function renderChildItems() {
      childTableBody.innerHTML  = '';
      hiddenContainer.innerHTML = '';
      childItems.forEach((ci, idx) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${ci.name}</td>
          <td>${ci.brand}</td>
          <td class="text-end">${ci.serial}</td>
          <td class="text-end">${ci.quantity}</td>
          <td class="text-center">
            <button type="button" class="btn btn-sm btn-danger remove-child" data-idx="${idx}">Remove</button>
          </td>`;
        childTableBody.appendChild(tr);

        Object.keys(childFieldMap).forEach(key => {
          const input = document.createElement('input');
          input.type  = 'hidden';
          input.name  = `inventory[data][child_item][${idx}][${childFieldMap[key]}]`;
          input.value = ci[key];
          hiddenContainer.appendChild(input);
        });
      });

      document.querySelectorAll('.remove-child').forEach(btn => {
        btn.addEventListener('click', e => {
          childItems.splice(+e.currentTarget.dataset.idx, 1);
          renderChildItems();
        });
      });
    }

    function toggleAddChild() {
      if (!itemSelect.value || items.find(item => item.id == itemSelect.value).is_parent === false) {
        addChildBtn.disabled = true;
        ['child_name','child_brand','child_serial_number','child_quantity']
          .forEach(id => document.getElementById(id).value = '');
        ['child_name','child_brand','child_serial_number','child_quantity']
          .forEach(id => document.getElementById(id).disabled = true);
      } else {
        addChildBtn.disabled = false;
        ['child_name','child_brand','child_serial_number','child_quantity']
          .forEach(id => document.getElementById(id).disabled = false);
      }
    }

    function updateSupplierDropdown(itemId) {
      const sel = items.find(i => i.id == itemId);
      supplierSelect.innerHTML = '<option value="">-- SELECT --</option>';
      if (!sel || !sel.data?.supplier_ids) return;
      sel.data.supplier_ids.forEach((id, idx) => {
        const opt = document.createElement("option");
        opt.value = id;
        opt.textContent = sel.data.supplier_names[idx] || "Unknown";
        if (id.toString() === inventorySupplierId) {
          opt.selected = true;
        }
        supplierSelect.appendChild(opt);
      });
    }

    function updateUnitAndSerial(itemId) {
      const sel = items.find(i => i.id == itemId);
      if (!sel) return;
      const isSupply = sel.item_type.toLowerCase() === 'supply';

      serialInput.disabled = isSupply;
      serialInput.required = !isSupply;
      if (isSupply) serialInput.value = '';

      if (isSupply) {
        unitInput.style.display    = 'none'; unitInput.required  = false; unitInput.disabled = true;
        unitDisplay.textContent    = sel.unit;  unitDisplay.style.display = 'block';
        unitHidden.value           = sel.unit;  unitHidden.disabled = false;
      } else {
        unitInput.style.display    = 'block'; unitInput.required   = true;  unitInput.disabled = false;
        unitDisplay.style.display  = 'none';  unitHidden.value     = '';
        unitHidden.disabled        = true;
      }
    }

    addChildBtn.addEventListener('click', () => {
      const name   = document.getElementById('child_name').value;
      const brand  = document.getElementById('child_brand').value;
      const serial = document.getElementById('child_serial_number').value;
      const qty    = document.getElementById('child_quantity').value;
      if (!name || !serial || !brand || !qty) return alert('Please fill Name, Brand, Serial Number, and Quantity');
      childItems.push({ name, brand, serial, quantity: qty });
      ['child_name','child_brand','child_serial_number','child_quantity']
        .forEach(id => document.getElementById(id).value = '');
      renderChildItems();
    });

    itemSelect.addEventListener('change', () => {
      toggleAddChild();
      updateSupplierDropdown(itemSelect.value);
      updateUnitAndSerial(itemSelect.value);
    });

    toggleAddChild();
    if (itemSelect.value) {
      updateSupplierDropdown(itemSelect.value);
      updateUnitAndSerial(itemSelect.value);
    }
    renderChildItems();
  });
